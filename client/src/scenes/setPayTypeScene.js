const { Scenes } =  require("telegraf");
const {menu_btn} = require('../models/buttons');
const {User, Ticket} = require('../api/controller/index');
const pay_method = require('../../../MenuDB/paymethod.json')
const axios = require('axios');
const FormData = require('form-data');
const creds = require('../models/fastik-gsheet.json');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const bot_sender = '5986688122:AAGfiCiyNIX_2shqSolWn-LtC0owxobDPAw';
const doc = new GoogleSpreadsheet('1RT3cT9YWAlAX0QMIxx8XIVJ2SRz8CqsHSVdhrKxK2vU');
const setPayTypeScene = new Scenes.BaseScene('setpaymethod');

function countSum(list){
    let sum = 0;
    list.forEach((el) => {
        sum += (el.price * el.amount);
    });
    return sum;
}

let method_type = ''
let pay_time = ''

setPayTypeScene.enter(async ctx => {
    await ctx.reply('–û–±–µ—Ä–∏ —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏, —á–µ—Ä–µ–∑ —è–∫–∏–π —Ç–∏ –±—É–¥–µ—à —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—å –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –£—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∫–∞–∑–∞–Ω–æ –≤ –Ω–∏–∂–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ –ø—ñ–¥ –ø–æ–ª–µ–º –¥–µ —Ç–∏ –≤–Ω–æ—Å–∏—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', {reply_markup:{
        inline_keyboard: [
            [
                {text: '–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑', callback_data: 'pay_now'}
            ],
            [
                {text: '–û–ø–ª–∞—Ç–∞ –∫—É—Ä‚Äô—î—Ä—É', callback_data: 'pay_later'}
            ]
        ],
        resize_keyboard: true,
    }});
})

setPayTypeScene.action(/pay_(.+)/, async ctx => {
    const [paymethod] = ctx.match.slice(1);
    await ctx.deleteMessage();
    let Tickets = new Ticket();
    let Users = new User();
    if(String(paymethod) === 'now'){
        method_type = 'now'
        await ctx.reply('–î–ª—è —Ç–æ–≥–æ —â–æ–±–∏ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑ –¥–∞–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç—É –∑–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–æ–º —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É –≤–∏–≥–ª—è–¥—ñ —Ñ–æ—Ç–æ, –¥–µ —î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É —á–∏ —Ç–æ—á–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–∞–∑—É.\n–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ - ' + Number(pay_method.card_number));
    }else if(String(paymethod) === 'later'){
        await ctx.reply('–û—Ñ–æ—Ä–º–ª—è—é —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');
        await doc.useServiceAccountAuth(creds);
        let user = await Users.getByUsername(ctx.chat.id)
        let string_busket = ""
        let i = 0;
        user.busket.forEach(item => {
            string_busket += `${++i}) ${item.name} - ${item.price} –≥—Ä–Ω/–æ.—Ç (${item.amount}—à—Ç).\n`
        })
        let date = new Date();
        let result = await Tickets.addTicket({
            itemlist: user.busket,
            owner: user.client_name + ' - ' + ctx.chat.id,
            adress: user.adress,
            pnumber: user.pnumber,
            tPrice: countSum(user.busket),
            from: user.busket[0].from,
            payMethod: '–û–ø–ª–∞—Ç–∞ –∫—É—Ä‚Äô—î—Ä—É',
            sec_info: ctx.state.sec_info != '' || ctx.state.sec_info != undefined  ? ctx.state.sec_info : "–í—ñ–¥—Å—É—Ç–Ω—è",
            date: `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes() < 10 ? '0'+date.getMinutes() : date.getMinutes()}:${date.getSeconds()}`,
        });
        let tickets = await Tickets.getAllByStatus(-1);
        let ticket;
        tickets.forEach(row => {
            let compInfo = String(row.date);
            if(compInfo === result.date && row.owner === result.owner){
                ticket = row;
            }
        });
        
        const caption = `#–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n–Ü–º'—è: ${user.client_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${ticket.pnumber}\n–ö–æ—à–∏–∫:\n${string_busket}\n–ó–∞–∫–ª–∞–¥: ${ticket.from}\n–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: ${ticket.tPrice}\n–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: ${ticket.payMethod}`;
        axios.post(`https://api.telegram.org/bot${bot_sender}/sendMessage`, {
            chat_id: -1001819835850,
            text: caption,
            reply_markup: {inline_keyboard:[[{text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: `accept_order_${ticket._id}`}]]},
        })
        .then(async data => {
            const raw = {
                '–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —á–µ–∫—É': ticket._id,
                '–ü–æ–∫—É–ø–µ—Ü—å': user.client_name,
                '–ö–æ—à–∏–∫': string_busket,
                '–ó–∞–∫–ª–∞–¥': ticket.from,
                '–ü—Ä–∏–º—ñ—Ç–∫–∞': ticket.sec_info,
                '–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏': ticket.adress,
                '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞': ticket.pnumber,
                '–°—É–º–º–∞': ticket.tPrice,
                '–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏': ticket.payMethod,
                '–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è': ticket.date,
                '–ö—É—Ä\'—î—Ä': ticket.courier,
                '–°—Ç–∞—Ç—É—Å': '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
                '–û—Ü—ñ–Ω–∫–∞': 0,
            };
            await doc.loadInfo();
            const sheet = doc.sheetsById[434269134];
            await sheet.addRow(raw);
            await Users.updateUser(ctx.chat.id, {busket: [], adress: "", payMethod: ""})
            await ctx.reply('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ‚úÖ\n–û–ß—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!\n–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ - "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫ üìí" —ñ –¥—ñ–∑–Ω–∞–π—Å—è –¥–µ—Ç–∞–ª—ñ –∫–æ–∂–Ω–æ–≥–æ —Ç–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüòå', {reply_markup: menu_btn}); 
        })
        .catch(async err => {
            await ctx.reply('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É');
            console.log(err);
        });
        
        ctx.scene.leave('setpaymethod');
    }
})

setPayTypeScene.on('photo', async ctx => {
    console.log('Now with ' + method_type);
    let Tickets = new Ticket();
    let Users = new User();
    if(method_type === 'now'){
        let photo = ctx.message.photo.length != 0 || ctx.message.photo != undefined ? ctx.message.photo[ctx.message.photo.length - 1] : '';
        await ctx.reply('–û—Ñ–æ—Ä–º–ª—è—é —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');
        await doc.useServiceAccountAuth(creds);
        let user = await Users.getByUsername(ctx.chat.id)
        let string_busket = ""
        let i = 0;
        user.busket.forEach(item => {
            string_busket += `${++i}) ${item.name} - ${item.price} –≥—Ä–Ω/–æ.—Ç (${item.amount}—à—Ç).\n`
        })
        let date = new Date();
        let result = await Tickets.addTicket({
            itemlist: user.busket,
            owner: user.client_name + ' - ' + ctx.chat.id,
            adress: user.adress,
            pnumber: user.pnumber,
            tPrice: countSum(user.busket),
            from: user.busket[0].from,
            payMethod: '–û–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞—Ä–∞–∑',
            sec_info: ctx.state.sec_info != '' || ctx.state.sec_info != undefined  ? ctx.state.sec_info : "–í—ñ–¥—Å—É—Ç–Ω—è",
            date: `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()} ${date.getHours()-1}:${date.getMinutes() < 10 ? '0'+date.getMinutes() : date.getMinutes()}:${date.getSeconds()}`,
        });
        let tickets = await Tickets.getAllByStatus(-1);
        let ticket;
        tickets.forEach(row => {
            let compInfo = String(row.date);
            if(compInfo === result.date && row.owner === result.owner){
                ticket = row;
            }
        });
        
        const caption = `#–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n–Ü–º'—è: ${user.client_name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${ticket.pnumber}\n–ö–æ—à–∏–∫:\n${string_busket}\n–ó–∞–∫–ª–∞–¥: ${ticket.from}\n–°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: ${ticket.tPrice}\n–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: ${ticket.payMethod}`;
        axios.post(`https://api.telegram.org/bot${bot_sender}/sendPhoto`, {
            chat_id: -1001819835850,
            photo: photo.file_id,
            caption: caption,
            reply_markup: {inline_keyboard:[[{text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data: `accept_order_${ticket._id}`}]]},
        })
        .then(async data => {
            const raw = {
                '–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —á–µ–∫—É': ticket._id,
                '–ü–æ–∫—É–ø–µ—Ü—å': user.client_name,
                '–ö–æ—à–∏–∫': string_busket,
                '–ó–∞–∫–ª–∞–¥': ticket.from,
                '–ü—Ä–∏–º—ñ—Ç–∫–∞': ticket.sec_info,
                '–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏': ticket.adress,
                '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞': ticket.pnumber,
                '–°—É–º–º–∞': ticket.tPrice,
                '–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏': ticket.payMethod,
                '–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è': ticket.date,
                '–ö—É—Ä\'—î—Ä': ticket.courier,
                '–°—Ç–∞—Ç—É—Å': '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
                '–û—Ü—ñ–Ω–∫–∞': 0,
            };
            await doc.loadInfo();
            const sheet = doc.sheetsById[434269134];
            await sheet.addRow(raw);
            await Users.updateUser(ctx.chat.id, {busket: [], adress: "", payMethod: ""})
            await ctx.reply('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ‚úÖ\n–û–ß—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!\n–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ - "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫ üìí" —ñ –¥—ñ–∑–Ω–∞–π—Å—è –¥–µ—Ç–∞–ª—ñ –∫–æ–∂–Ω–æ–≥–æ —Ç–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüòå', {reply_markup: menu_btn}); 
        })
        .catch(async err => {
            await ctx.reply('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É');
            console.log(err);
        });
        
        ctx.scene.leave('setpaymethod');
    }
});

setPayTypeScene.leave(async ctx => {
    console.log(ctx.state.pay_type);   
    console.log('Leave');
})

module.exports = setPayTypeScene;