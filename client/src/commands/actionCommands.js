const Telegraf = require('telegraf');
require('dotenv').config();
const {menu_btn} = require('../models/buttons');
const shopList = require('../models/shops');
const restList = require('../models/rest');
const {User, Ticket} = require('../api/controller/index');
const {getAdress} = require('./inputCommands');
const { GoogleSpreadsheet } = require('google-spreadsheet');

const doc = new GoogleSpreadsheet(process.env.GS_SpreadSheetID);

function countSum(list){
    let sum = 0;
    list.forEach((el) => {
        sum += (el.price * el.amount);
    });
    return sum;
}

function getProductsKeyboard(shopArray, type) {
    return Telegraf.Markup.inlineKeyboard(
        shopArray.products.map((item) => {
            return [Telegraf.Markup.button.callback(`${item.name} - ${item.price} –≥—Ä–Ω.`, `get_${type}_${shopArray.id}_${item.id}`)];
        })
    );
}

function readCommandsAction(bot){

    bot.action('cont_reg', async (ctx) => {
        let Users = new User();
        let user = await Users.getByUsername(ctx.chat.username);
        if(user === undefined){
            await Auth.register(ctx.chat.username)
        }
        if(user.pnumber === ""){
            await ctx.reply('–ë–∞—á—É, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∫–æ–ª–∏ —Ç–∏ –≤–≤–æ–¥–∏–≤ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—Éüòï\n–©–æ –∂ –¥–∞–≤–∞–π —Ü–µ –≤–∏–ø—Ä–∞–≤–∏–º–æüòâ');
            await ctx.scene.enter('setNumber');
        }else if(user.client_name === ""){
            await ctx.scene.enter('setName');
        }else{
            await ctx.reply('–î—è–∫—É—é –∑–∞ —Ä–æ–±–æ—Ç—É, –≤—Å–µ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–ª–æ –º–µ–Ω—ñ - –æ—Ç—Ä–∏–º–∞–Ω–æ, —Ç–∏ –º–æ–ª–æ–¥–µ—Ü—åüòâ\n–û–±–µ—Ä–∏ –ø—É–Ω–∫—Ç —É –º–µ–Ω—é —è–∫–∏–π —Ç–æ–±—ñ –¥–æ –≤–ø–æ–¥–æ–±–∏, —â–æ–±–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—éüòå', {reply_markup: menu_btn});
        }
    })

    bot.action('previous', async (ctx) => {
        await ctx.deleteMessage();
        if(numberOfTicketInList+1 < 1){
            numberOfTicketInList = 0;
        }else{
            --numberOfTicketInList;
        }
        list = "";
        let tickets = new Ticket();
        userTickets = await tickets.getByUsername(`@${ctx.chat.username}%20(${ctx.chat.first_name}%20${ctx.chat.last_name != undefined ? ctx.chat.last_name : '\b'})`);
        if(userTickets.length != 0){
            let i = 0;
            userTickets[numberOfTicketInList].itemlist.forEach(el => {
                list += `${++i}) ${el.name} - ${el.price} grn (${el.amount} —à—Ç)\n`;
            })
            await ctx.reply(`–Ü–Ω–¥–µ–∫—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList]._id}\n\n–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList].date}\n\n–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:\n\n${list}\n\n–ö—É—Ä'—î—Ä: @${userTickets[numberOfTicketInList].courier != "" ? '@'+userTickets[numberOfTicketInList].courier : "–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ –Ω–∞ –∫—É—Ä'—î—Ä–∞ ‚åõ"}\n\n–ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: ${userTickets[numberOfTicketInList].tPrice} –≥—Ä–Ωüí∏\n\n–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList].status === 0 ? '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚åõ' : userTickets[numberOfTicketInList].status === 1 ? '–û—á—ñ–∫—É—î –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—èüöó' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ‚úÖ'}`,
                {
                    reply_markup: {
                        inline_keyboard: numberOfTicketInList != 0 ? [
                            [
                                {text: "‚óÄÔ∏è", callback_data: "previous"},
                                {text: "‚ñ∂Ô∏è", callback_data: "next"}
                            ]
                        ] : [
                            [
                                {text: "‚ñ∂Ô∏è", callback_data: "next"}
                            ]
                        ],
                        resize_keyboard: true
                    }
                }
            );
        }
    });
    bot.action('next', async (ctx) => {
        await ctx.deleteMessage();
        if(userTickets.length <= numberOfTicketInList+1){
            numberOfTicketInList = userTickets.length - 1;
        }else ++numberOfTicketInList;
        list = "";
        let tickets = new Ticket();
        userTickets = await tickets.getByUsername(`@${ctx.chat.username}%20(${ctx.chat.first_name}%20${ctx.chat.last_name != undefined ? ctx.chat.last_name : '\b'})`);
        if(userTickets.length != 0){
            let i = 0;
            userTickets[numberOfTicketInList].itemlist.forEach(el => {
                list += `${++i}) ${el.name} - ${el.price} grn (${el.amount} —à—Ç)\n`;
            })
            await ctx.reply(`–Ü–Ω–¥–µ–∫—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList]._id}\n\n–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList].date}\n\n–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:\n\n${list}\n\n–ö—É—Ä'—î—Ä: ${userTickets[numberOfTicketInList].courier != "" ? '@'+userTickets[numberOfTicketInList].courier : "–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ –Ω–∞ –∫—É—Ä'—î—Ä–∞ ‚åõ"}\n\n–ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: ${userTickets[numberOfTicketInList].tPrice} –≥—Ä–Ωüí∏\n\n–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList].status === 0 ? '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚åõ' : userTickets[numberOfTicketInList].status === 1 ? '–û—á—ñ–∫—É—î –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—èüöó' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ‚úÖ'}`,
                {
                    reply_markup: {
                        inline_keyboard: numberOfTicketInList != 0 ? [
                            [
                                {text: "‚óÄÔ∏è", callback_data: "previous"},
                                {text: "‚ñ∂Ô∏è", callback_data: "next"}
                            ]
                        ] : [
                            [
                                {text: "‚ñ∂Ô∏è", callback_data: "next"}
                            ]
                        ],
                        resize_keyboard: true
                    }
                }
            );
        }
    });
    bot.action('main', async (ctx) => {
        await ctx.reply('–û–±–µ—Ä–∏ –ø—É–Ω–∫—Ç —É –º–µ–Ω—é —è–∫–∏–π —Ç–æ–±—ñ –¥–æ –≤–ø–æ–¥–æ–±–∏, —â–æ–±–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—éüòå', {reply_markup: menu_btn});
    });

    bot.action('reinit_adress', async (ctx) => {
        await ctx.deleteMessage();
        await ctx.reply( '–ü–µ—Ä–µ–¥ —Ç–∏–º —è–∫ —è –æ—Ñ–æ—Ä–º–ª—é —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∫–∞–∂–∏ —Å–≤–æ—é –∞–¥—Ä–µ—Å—É –∫—É–¥–∏ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å–µ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º - –≤—É–ª. –°–∏–º–æ–Ω–µ–Ω–∫–∞ –±—É–¥ 2 –∫–≤ 41\n–£ —Ä–∞–∑—ñ —è–∫—â–æ —Ö–æ—á–µ—à —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤–Ω–µ—Å–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ - –Ω–∞—Ç–∏—Å–Ω–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå" —ñ —Ç–æ–¥—ñ –ø–æ–≤–µ—Ä–Ω–µ—à—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüòâ', {reply_markup:{
            keyboard: [
                ['–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå']
            ],
            resize_keyboard: true,
        }})
        await getAdress(bot);
    });

    bot.action('finish_order', async (ctx) => {
        await ctx.deleteMessage();
        try {

            let Tickets = new Ticket();
            let Users = new User();
            user = await Users.getByUsername(ctx.chat.username)
            if(user.pnumber === ""){
                await ctx.scene.enter('setNumber');
            }else if(user.client_name === ""){
                await ctx.scene.enter('setName');
            }else if(user.payMethod === ""){
                await ctx.scene.enter('setpaymethod');
            }else{
                await doc.useServiceAccountAuth({
                    client_email: process.env.GS_client_email,
                    private_key: process.env.GS_private_key.split(String.raw`\n`).join('\n'),
                });
                let string_busket = ""
                let i = 0;
                user.busket.forEach(item => {
                    string_busket += `${++i}) ${item.name} - ${item.price} –≥—Ä–Ω/–æ.—Ç (${item.amount}—à—Ç).\n`
                })
                let date = new Date();
                let result = await Tickets.addTicket({
                    itemlist: user.busket,
                    owner: user.client_name,
                    adress: user.adress,
                    pnumber: user.pnumber,
                    tPrice: countSum(user.busket),
                    from: user.busket[0].from,
                    payMethod: user.payMethod,
                    date: `${date.getDate()}/${date.getMonth()}/${date.getFullYear()} ${date.getHours()-1}:${date.getMinutes() < 10 ? '0'+date.getMinutes() : date.getMinutes()}:${date.getSeconds()}`,
                });
                let tickets = await Tickets.getAllByStatus(0);
                let ticket;
                tickets.forEach(row => {
                    let compInfo = String(row.date);
                    if(compInfo === result.date && row.owner === result.owner){
                        ticket = row;
                    }
                });
                const raw = {
                    '–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —á–µ–∫—É': ticket._id,
                    '–ü–æ–∫—É–ø–µ—Ü—å': ticket.owner,
                    '–ö–æ—à–∏–∫': string_busket,
                    '–ó–∞–∫–ª–∞–¥': ticket.from,
                    '–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏': ticket.adress,
                    '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞': ticket.pnumber,
                    '–°—É–º–º–∞': ticket.tPrice,
                    '–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏': ticket.payMethod,
                    '–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è': ticket.date,
                    '–ö—É—Ä\'—î—Ä': ticket.courier,
                    '–°—Ç–∞—Ç—É—Å': '–í –æ–±—Ä–æ–±—Ü—ñ',
                };
                await doc.loadInfo();
                const sheet = doc.sheetsById[434269134];
                await sheet.addRow(raw);
                
                await Users.updateUser(ctx.chat.username, {busket: [], adress: "", payMethod: ""})
                await ctx.reply('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ‚úÖ\n–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ - "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫ üìí" —ñ –¥—ñ–∑–Ω–∞–π—Å—è –¥–µ—Ç–∞–ª—ñ –∫–æ–∂–Ω–æ–≥–æ —Ç–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—èüòå', {reply_markup: menu_btn});    
            }
        } catch (error) {
            console.log('====================================');
            console.log(`Error while finishing order. ${error}`);
            console.log('====================================');
        }
    })

    bot.action(/add_(.+)_(.+)_(.+)/, async (ctx) => {
        const [list, shop_id, item_id] = ctx.match.slice(1);
        await ctx.deleteMessage();
        const controller = new User();
        const data = await controller.getByUsername(ctx.chat.username);
        let basket = data.busket;
        if(list === "shop"){
            const shop = shopList.find(shops => shops.id === Number(shop_id));
            const item = shop.products.find(products => products.id === Number(item_id))
            if(basket.length != 0){
                if(basket[0].from != shop.name){
                    await ctx.reply(`–¢–∏ –º–æ–∂–µ—à –∑–∞–º–æ–≤–ª—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤–∏–∫–ª—é—á–Ω–æ –≤ '${basket[0].from}'`, {reply_markup: menu_btn});
                }else{
                    basket.push(
                        {
                            "name": item.name,
                            "price": item.price,
                            "amount": 0,
                            "from": shop.name
                        }
                    );
                    await controller.updateUser(ctx.chat.username, {busket: basket});
                    await ctx.scene.enter('initBasket');
                }
            }else{
                basket.push(
                    {
                        "name": item.name,
                        "price": item.price,
                        "amount": 0,
                        "from": shop.name
                    }
                );
                await controller.updateUser(ctx.chat.username, {busket: basket});
                await ctx.scene.enter('initBasket');
            }
            
        }else if (list === "rest"){
            const shop = restList.find(shops => shops.id === Number(shop_id));
            const item = shop.products.find(products => products.id === Number(item_id))
            if(basket.length != 0){
                if(basket[0].from != shop.name){
                    await ctx.reply(`–¢–∏ –º–æ–∂–µ—à –∑–∞–º–æ–≤–ª—è—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤–∏–∫–ª—é—á–Ω–æ –≤ '${basket[0].from}'`, {reply_markup: menu_btn});
                }else{
                    basket.push(
                        {
                            "name": item.name,
                            "price": item.price,
                            "amount": 0,
                            "from": shop.name
                        }
                    );
                    await controller.updateUser(ctx.chat.username, {busket: basket});
                    await ctx.scene.enter('initBasket');
                }
            }else{
                basket.push(
                    {
                        "name": item.name,
                        "price": item.price,
                        "amount": 0,
                        "from": shop.name
                    }
                );
                await controller.updateUser(ctx.chat.username, {busket: basket});
                await ctx.scene.enter('initBasket');
            }
            
        }
    })
    
    bot.action(/get_list_(.+)_(.+)/, async (ctx) => {
        await ctx.deleteMessage();
        const [list, shop_id, item_id] = ctx.match.slice(1);
        if(list === "shop"){
            const shop = shopList.find(shops => shops.id === Number(shop_id));
            ctx.session.shop = shop;
            ctx.reply(`–û–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —â–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø—ñ–¥ –¥–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–ºüòå`, getProductsKeyboard(shop, "shop"));
        }else if (list === "rest"){
            const shop = restList.find(shops => shops.id === Number(shop_id));
            ctx.session.shop = shop;
            ctx.reply(`–û–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —â–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø—ñ–¥ –¥–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–ºüòå`, getProductsKeyboard(shop, "rest"));
        }
    })

    bot.action(/get_(.+)_(.+)_(.+)/, async (ctx) => {
        const [list, shop_id, item_id] = await ctx.match.slice(1);
        console.log(`get_${list}_${shop_id}_${item_id}`);
        await ctx.deleteMessage();
        if(list === "shop"){
            const shop = await shopList.find(shops => shops.id === Number(shop_id));
            const item = await shop.products.find(products => products.id === Number(item_id))
            await ctx.sendPhoto(
                {
                    source: item.photo
                },
                {
                    caption:  `${item.name}\n–¶—ñ–Ω–∞:${item.price} –≥—Ä–Ω`,
                    reply_markup: {
                        inline_keyboard:[
                            [
                                {text: "–£ –∫–æ—à–∏–∫ üóëÔ∏è", callback_data: `add_${list}_${shop_id}_${item_id}`}
                            ],
                            [
                                {text: "–Ü–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ üìù", callback_data: `get_list_${list}_${shop_id}`}
                            ]
                        ]
                    }
                }
            );
        }else if (list === "rest"){
            const shop = await restList.find(shops => shops.id === Number(shop_id));
            const item = await shop.products.find(products => products.id === Number(item_id))
            await ctx.sendPhoto(
                {
                    source: `${item.photo}`
                },
                {
                    caption:  `${item.name}\n–¶—ñ–Ω–∞:${item.price}–≥—Ä–Ω`,
                    reply_markup: {
                        inline_keyboard:[
                            [
                                {text: "–£ –∫–æ—à–∏–∫ üóëÔ∏è", callback_data: `add_${list}_${shop_id}_${item_id}`}
                            ],
                            [
                                {text: "–Ü–Ω—à—ñ —Ç–æ–≤–∞—Ä–∏ üìù", callback_data: `get_list_${list}_${shop_id}`}
                            ]
                        ]
                    }
                }
            );
        }
    })
}

module.exports = readCommandsAction;