const Telegraf = require('telegraf');
const {menu_btn,rest_menu_btn,shop_menu_btn,tomain_inline_btn,busket_menu_btn,} = require('../models/buttons');
const shopList = require('../../../MenuDB/shops.json');
const restList = require('../../../MenuDB/restaurant.json');
const {User, Ticket} = require('../api/controller/index');
const {getAdress} = require('./inputCommands');
const cmdList = require('../models/cmd.list.json');

let numberOfTicketInList = 0;
let userTickets = [];
let list = "";

function countSum(list){
    let sum = 0;
    list.forEach((el) => {
        sum += (el.price * el.amount);
    });
    return sum;
}

function getProductsKeyboard(shopArray, type) {
    return Telegraf.Markup.inlineKeyboard(
        shopArray.products.map((item) => {
            return [Telegraf.Markup.button.callback(`${item.name} - ${item.price} –≥—Ä–Ω.`, `get_${type}_${shopArray.id}_${item.id}`)];
        })
    );
}

function getShopsKeyboard() {
    return Telegraf.Markup.inlineKeyboard(
        shopList.shops.map((item) => {
            return [Telegraf.Markup.button.callback(`${item.name}`, `get_products_shop_${item.id}`)];
        })
    );
}

function getRestsKeyboard() {
    return Telegraf.Markup.inlineKeyboard(
        restList.shops.map((item) => {
            return [Telegraf.Markup.button.callback(`${item.name}`, `get_products_rest_${item.id}`)];
        })
    );
}

function readCommandsButton(bot){

    bot.action(/get_products_(.+)_(.+)/, (ctx) => {
        const [type, id] = ctx.match.slice(1);
        if(type === "shop"){
            const shop = shopList.shops.find(shop => shop.id === Number(id));
            console.log(shop);
            ctx.reply(`–û–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —â–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø—ñ–¥ –¥–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–ºüòå`, getProductsKeyboard(shop, type));
        }else if(type === "rest"){
            const shop = restList.shops.find(shop => shop.id === Number(id));
            console.log(shop);
            ctx.reply(`–û–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —â–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø—ñ–¥ –¥–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–ºüòå`, getProductsKeyboard(shop, type));
        }
    });

    bot.hears(cmdList.buttons.map(button => button.name), async ctx => {
        let controller;
        let data;
        try {
            switch (ctx.update.message.text) {
                case '–†–µ—Å—Ç–æ—Ä–∞–Ω–∏ üçΩÔ∏è':
                    await ctx.reply( '–û–±–µ—Ä–∏ –∑–∞–∫–ª–∞–¥ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è —É —è–∫–æ–º—É —Ç–∏ —Ö–æ—á–µ—à –∑–∞–º–æ–≤–∏—Ç–∏. –°–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥—ñ–≤ —É —Ç–µ–±–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –ø—ñ–¥ –¥–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º', getRestsKeyboard())
                    break;
                case '–ú–∞–≥–∞–∑–∏–Ω–∏ üè™':
                    await ctx.reply( '–û–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω —É —è–∫–æ–º—É —Ç–∏ —Ö–æ—á–µ—à –∑–∞–º–æ–≤–∏—Ç–∏. –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤ —É —Ç–µ–±–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –ø—ñ–¥ –¥–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º', getShopsKeyboard())
                    break;
                case '–ö–æ—à–∏–∫ üß∫':
                    controller = new User();
                    data = await controller.getByUsername(ctx.chat.id);
                    if(data.busket.length != 0){
                        await ctx.reply( '–¢–≤—ñ–π –∫–æ—à–∏–∫ –≤–∏–≥–ª—è–¥–∞—î –æ—Å—å —Ç–∞–∫:')
                        let list = "";
                        let i = 0;
                        data.busket.forEach(el => {
                            list += `${++i}) ${el.name} - ${el.price} –≥—Ä–Ω üí∏ (${el.amount} —à—Ç)\n`;
                        })
                        await ctx.reply( `${list}`)
                        await ctx.reply( '–û–±–µ—Ä–∏ –¥—ñ—é —á–µ—Ä–µ–∑ —è–∫—É —Ç–∏ –±—É–¥–µ—à –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ —ñ–∑ –≤–ª–∞—Å–Ω–∏–º –∫–æ—à–∏–∫–æ–º', {reply_markup:busket_menu_btn})
                    }else{
                        await ctx.reply( '–°–ø–æ—á–∞—Ç–∫—É —Å–∫–ª–∞–¥–∏ –≤—Å–µ –≤ –∫–æ—à–∏–∫ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ\—Å–∫—Ä—ñ–Ω —Å–ø—É—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–≤–µ–∑—Ç–∏üòå', {reply_markup:menu_btn})
                    }
                    break;
                case '–û—á–∏—Å—Ç–∏—Ç–∏ üóëÔ∏è':
                    controller = new User();
                    await controller.updateUser(ctx.chat.id, {busket: []});
                    await ctx.reply('–ö–æ—à–∏–∫ —Å—Ç–∞–≤ –ø–æ—Ä–æ–∂–Ω—ñ–ºüò¢', {reply_markup:menu_btn});
                    break;
                case '–ì–æ–ª–æ–≤–Ω–∞ üö™':
                    await ctx.reply('–û–±–µ—Ä–∏ –ø—É–Ω–∫—Ç —É –º–µ–Ω—é —è–∫–∏–π —Ç–æ–±—ñ –¥–æ –≤–ø–æ–¥–æ–±–∏, —â–æ–±–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—éüòå', {reply_markup: menu_btn});
                    break;
                case "–í–∫–∞–∑–∞—Ç–∏ –∞–¥—Ä–µ—Å—É üîÑ":
                    try {
                        await ctx.reply( '–ü–µ—Ä–µ–¥ —Ç–∏–º —è–∫ —è –æ—Ñ–æ—Ä–º–ª—é —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∫–∞–∂–∏ —Å–≤–æ—é –∞–¥—Ä–µ—Å—É –∫—É–¥–∏ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å–µ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º - –≤—É–ª. –°–∏–º–æ–Ω–µ–Ω–∫–∞ –±—É–¥ 2 –∫–≤ 41\n–£ —Ä–∞–∑—ñ —è–∫—â–æ —Ö–æ—á–µ—à —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤–Ω–µ—Å–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ - –Ω–∞—Ç–∏—Å–Ω–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå" —ñ —Ç–æ–¥—ñ –ø–æ–≤–µ—Ä–Ω–µ—à—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüòâ', {reply_markup:{
                            keyboard: [
                                ['–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå']
                            ],
                            resize_keyboard: true,
                        }})
                        await getAdress(bot);
                    } catch (error) {
                        console.log(`Error while edit address. Error: ${error}`);
                    }
                    break;
                case "–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìù":
                    controller = new User();
                    user = await controller.getByUsername(ctx.chat.id);
                    if(user.busket.length === 0){
                        await ctx.reply( '–°–ø–æ—á–∞—Ç–∫—É —Å–∫–ª–∞–¥–∏ –≤—Å–µ –≤ –∫–æ—à–∏–∫ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ\—Å–∫—Ä—ñ–Ω —Å–ø—É—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–≤–µ–∑—Ç–∏üòå', {reply_markup:menu_btn})
                    }else if(user.adress === ""){
                        await ctx.reply( '–ü–µ—Ä–µ–¥ —Ç–∏–º —è–∫ —è –æ—Ñ–æ—Ä–º–ª—é —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∫–∞–∂–∏ —Å–≤–æ—é –∞–¥—Ä–µ—Å—É –∫—É–¥–∏ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å–µ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º - –≤—É–ª. –°–∏–º–æ–Ω–µ–Ω–∫–∞ –±—É–¥ 2 –∫–≤ 41\n–£ —Ä–∞–∑—ñ —è–∫—â–æ —Ö–æ—á–µ—à —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≤–Ω–µ—Å–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ - –Ω–∞—Ç–∏—Å–Ω–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå" —ñ —Ç–æ–¥—ñ –ø–æ–≤–µ—Ä–Ω–µ—à—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüòâ', {reply_markup:{
                            keyboard: [
                                ['–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå']
                            ],
                            resize_keyboard: true,
                        }})
                        await getAdress(bot);
                    }else if(user.pnumber === ""){
                        await ctx.scene.enter('setNumber');
                    }else if(user.client_name === ""){
                        await ctx.scene.enter('setName');
                    }else if(user.payMethod === ""){
                        await ctx.scene.enter('setpaymethod');
                    }else{
                        let itemList = "";
                        let i = 0;
                        user.busket.forEach(el => {
                            itemList += `${++i}) ${el.name} - ${el.price} grn (${el.amount} —à—Ç)\n`;
                        })
                        if(itemList != ""){
                            await ctx.reply( '–û—Ñ–æ—Ä–º–ª—è—é —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
                            await ctx.reply( '–¢–≤–æ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ:')
                            await ctx.reply(`–í–ª–∞—Å–Ω–∏–∫: ${user.client_name}\n–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${user.adress}`)
                            await ctx.reply( '–¢–≤—ñ–π –∫–æ—à–∏–∫ –≤–∏–≥–ª—è–¥–∞—î –æ—Å—å —Ç–∞–∫:')
                            await ctx.reply( `${itemList}`)
                            await ctx.reply( `–î–æ —Å–ø–ª–∞—Ç–∏: ${countSum(user.busket)} –≥—Ä–Ωüí∏`)
                            await ctx.reply( '–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚ñ∂Ô∏è" —ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æüòâ\n–£ —Ä–∞–∑—ñ —è–∫—â–æ –∞–¥—Ä–µ—Å—É –≤–∫–∞–∑–∞–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –Ω–∞—Ç–∏—Å–Ω–∏ "–ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É üîÑ" –∞–±–∏ –∑–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏üòå', {
                                reply_markup: {
                                    inline_keyboard:[
                                        [
                                            {text: "–ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É üîÑ", callback_data: "reinit_adress"},
                                        ],
                                        [
                                            
                                            {text: "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚ñ∂Ô∏è", callback_data: "finish_order"}
                                        ],
                                    ]
                                }
                            })
                        }else{
                            await ctx.reply( '–ù–∞–∂–∞–ª—å —Ç–∏ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –¥–æ–¥–∞–≤–∞–≤ —É –∫–æ—à–∏–∫üò¢', {reply_markup:menu_btn})
                        }
                    }
                    break;
                case '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫ üìí':
                    let tickets = new Ticket();
                    userTickets = await tickets.getByUsername(`@${ctx.chat.id}%20(${ctx.chat.first_name}%20${ctx.chat.last_name != undefined ? ctx.chat.last_name : '\b'})`);
                    list = "";
                    if(userTickets.length != 0){
                        let i = 0;
                        userTickets[numberOfTicketInList].itemlist.forEach(el => {
                            list += `${++i}) ${el.name} - ${el.price} grn (${el.amount} —à—Ç)\n`;
                        })
                        await ctx.reply(`–Ü–Ω–¥–µ–∫—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList]._id}\n\n–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList].date}\n\n–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:\n\n${list}\n\n–ö—É—Ä'—î—Ä: ${userTickets[numberOfTicketInList].courier != "" ? '@'+userTickets[numberOfTicketInList].courier : "–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ –Ω–∞ –∫—É—Ä'—î—Ä–∞ ‚åõ"}\n\n–ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: ${userTickets[numberOfTicketInList].tPrice} –≥—Ä–Ωüí∏\n\n–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList].status === 0 ? '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚åõ' : userTickets[numberOfTicketInList].status === 1 ? '–û—á—ñ–∫—É—î –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—èüöó' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ‚úÖ'}`,
                            {
                                reply_markup: {
                                    inline_keyboard: numberOfTicketInList != 0 ? [
                                        [
                                            {text: "‚óÄÔ∏è", callback_data: "previous"},
                                            {text: "‚ñ∂Ô∏è", callback_data: "next"}
                                        ]
                                    ] : [
                                        [
                                            {text: "‚ñ∂Ô∏è", callback_data: "next"}
                                        ]
                                    ],
                                    resize_keyboard: true
                                }
                            }
                        );
                    }else{
                        await ctx.reply(`–¢–∏ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–º–æ–≤–ª—è–≤üòï`);
                    }
                    break;
                default:
                    console.log(ctx);
                    break;
            }
        } catch (error) {
            console.log(`Error info: ${error}`);
        }
    });
}

module.exports = readCommandsButton;