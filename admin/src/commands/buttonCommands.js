const Telegraf = require('telegraf');
require('dotenv').config();
const cmdList = require('../models/cmd.list.json');
const typeList = require('../models/type.excel.file.json');
const {Ticket, User} = require('../api/controller/index');

let userTickets = [];
let numberOfTicketInList = 0;
let list = "";

function getGenTypeKeyboard() {
    return Telegraf.Markup.inlineKeyboard(
        typeList.types.map((item) => {
            return [Telegraf.Markup.button.callback(`${item.name}`, `generate_type_${item.type}`)];
        })
    );
}

function readButtonCommands(bot){

    bot.hears(cmdList.buttons.map(button => button.name), async ctx => {
        switch(ctx.message.text){
            case '–í–∏—Ç—è–≥ —ñ–∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ üìù':
                await ctx.reply('–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤–∏—Ç—è–≥—É –Ω–∏–∂—á–µ –∞–±–∏ —è –∑–º—ñ–≥ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ Excel-—Ç–∞–±–ª–∏—Ü—é:', getGenTypeKeyboard());
                break;
            case "–ü–µ—Ä—Å–æ–Ω–∞–ª üóÇÔ∏è":
                await ctx.reply('In progress');
                break;
            case "–¢–æ–≤–∞—Ä–∏ üóÑÔ∏è":
                await ctx.reply('In progress'); 
                break;
            case "–•–æ—á—É –≤ –∫–æ–º–∞–Ω–¥—É üôã":
                let Users = new User();
                let user = await Users.getByUsername(ctx.chat.id);
                await ctx.reply(`–©–æ–±–∏ —Å—Ç–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω–∫–æ—é –∫–æ–º–∞–Ω–¥–∏, —Ç–∏ –ø–æ–≤–∏–Ω–µ–Ω –∑–≤'—è–∑–∞—Ç–∏—Å—å —ñ–∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é –¥–∞–Ω–æ—ó —Å–ª—É–∂–±–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–∞ –Ω–∞–¥–∞—Ç–∏ —Å–≤—ñ–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –≤ –±–∞–∑—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n–¢–≤—ñ–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä - ${user.name}`, {reply_markup:{
                    remove_keyboard: true,
                }}); 
                break;
            case '–í–∑—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìù':
                showFreeTickets(ctx);
                break;
            case "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üìí":
                showReservedTickets(ctx);
                break;
            default: 
                console.log(ctx.meassage.text);
                break;
        }
    })
}


async function showReservedTickets(ctx){
    let Tickets = new Ticket();
    data = await Tickets.getAllByStatus(1)
    let Users = new User();
    let user = await Users.getByUsername(ctx.chat.id);
    console.log(user.name+"("+user.client_name+")");
    userTickets = data.filter(ticket => ticket.courier === user.name+"("+user.client_name+")");
    if(userTickets.length != 0){
        let i = 0;
        list = "";
        console.log(userTickets[numberOfTicketInList].itemlist);
        userTickets[numberOfTicketInList].itemlist.forEach(el => {
            list += `${++i}) ${el.name} - ${el.price} grn (${el.amount} —à—Ç)\n`;
        })
        await ctx.reply(`–Ü–Ω–¥–µ–∫—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList]._id}\n\n–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList].date}\n\n–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:\n\n${list}\n\n–í–ª–∞—Å–Ω–∏–∫: ${userTickets[numberOfTicketInList].owner}\n\n–ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: ${userTickets[numberOfTicketInList].tPrice} –≥—Ä–Ωüí∏\n\n–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList].status === 0 ? '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚åõ' : userTickets[numberOfTicketInList].status === 1 ? '–û—á—ñ–∫—É—î –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—èüöó' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ‚úÖ'}`,
            {
                reply_markup: {
                    inline_keyboard: numberOfTicketInList != 0 ? [
                        [
                            {text: "‚óÄÔ∏è", callback_data: "previous_book"},
                            {text: "‚ñ∂Ô∏è", callback_data: "next_book"}
                        ],
                        [
                            {text: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É ‚úÖ", callback_data: `finish_delivery_${userTickets[numberOfTicketInList]._id}`},
                        ]
                    ] : [
                        [
                            {text: "‚ñ∂Ô∏è", callback_data: "next_book"}
                        ],
                        [
                            {text: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É ‚úÖ", callback_data: `finish_delivery_${userTickets[numberOfTicketInList]._id}`},
                        ]
                    ],
                    resize_keyboard: true
                }
            }
        );
    }else{
        await ctx.reply(`–ù–∞–∂–∞–ª—å —Ç–∏ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª—è—î—à üòï`);
    }
}


async function showFreeTickets(ctx){
    let Tickets = new Ticket();
    userTickets = await Tickets.getAllByStatus(0)
    if(userTickets.length != 0){
        let i = 0;
        list = "";
        userTickets[numberOfTicketInList].itemlist.forEach(el => {
            list += `${++i}) ${el.name} - ${el.price} grn (${el.amount} —à—Ç)\n`;
        })
        await ctx.reply(`–Ü–Ω–¥–µ–∫—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList]._id}\n\n–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList].date}\n\n–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:\n\n${list}\n–í–ª–∞—Å–Ω–∏–∫: ${userTickets[numberOfTicketInList].owner}\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${userTickets[numberOfTicketInList].pnumber}\n\n–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${userTickets[numberOfTicketInList].date}\n\n–°–ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞: ${userTickets[numberOfTicketInList].tPrice} –≥—Ä–Ωüí∏\n\n–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${userTickets[numberOfTicketInList].status === 0 ? '–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚åõ' : userTickets[numberOfTicketInList].status === 1 ? '–û—á—ñ–∫—É—î –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—èüöó' : '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ‚úÖ'}`,
            {
                reply_markup: {
                    inline_keyboard: numberOfTicketInList != 0 ? [
                        [
                            {text: "‚óÄÔ∏è", callback_data: "previous"},
                            {text: "‚ñ∂Ô∏è", callback_data: "next"}
                        ],
                        [
                            {text: "–í–∑—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚úÖ", callback_data: `finish_booking_${userTickets[numberOfTicketInList]._id}`},
                        ]
                    ] : [
                        [
                            {text: "‚ñ∂Ô∏è", callback_data: "next"}
                        ],
                        [
                            {text: "–í–∑—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚úÖ", callback_data: `finish_booking_${userTickets[numberOfTicketInList]._id}`},
                        ]
                    ],
                    resize_keyboard: true
                }
            }
        );
    }else{
        await ctx.reply(`–ù–∞–∂–∞–ª—å –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î(üòï`);
    }
}

module.exports = readButtonCommands;